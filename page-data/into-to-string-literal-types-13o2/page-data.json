{"componentChunkName":"component---src-templates-article-tsx","path":"/into-to-string-literal-types-13o2","result":{"data":{"article":{"body_html":"<p>Are you using <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#string-literal-types\">string literal types</a>? They're by far my most favorite feature in TypeScript. In their simplest form, they're used as a set of self-documenting props. In advanced cases, <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#exhaustiveness-checking\">exhaustiveness type checking</a> gives you confidence knowing that you'll receive compile errors when making updates without properly handling all cases.</p>\n\n<p>If you're new to TypeScript and not yet using string literal types, then let's go over three reasons why you'll want to start using them:</p>\n\n<ol>\n<li><a href=\"#self-documenting-props\">Self documenting props</a></li>\n<li><a href=\"#pairing-with-recordltk-tgt\">Pairing with Record&lt;K, T&gt;</a></li>\n<li><a href=\"#exhaustiveness-checking\">Exhaustiveness checking</a></li>\n</ol>\n\n<h1>\n  <a name=\"self-documenting-props\" href=\"#self-documenting-props\" class=\"anchor\">\n  </a>\n  Self documenting props\n</h1>\n\n<p>I need a helper function that returns a number when given input of small, medium, or large. This is a pretty common pattern when creating React components and could be used for something as simple as supporting different sizes of buttons. How would I do this without string literal types?</p>\n\n<p><em>Note: This is probably the worst possible way to handle this. Don't do this!</em> ðŸ¤ <br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">getPx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">string</span><span class=\"p\">):</span> <span class=\"nx\">number</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">20</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">medium</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n\n\n\n<p>From looking at this, it's pretty clear what props are supported, but I need to look at the code to understand it. What if this is moved to a library? Would I need to go to the readme or to the source code to remind myself which props are supported? This is a quick way to guarantee that nobody uses this helper function.</p>\n\n<p>Converting this to use a string literal type does two things:</p>\n\n<ol>\n<li>Defines a clear set of accepted properties. If you're using an IDE with IntelliSense then you'll see supported props as you type.</li>\n<li>Compile time error when using unsupported props:\n</li>\n</ol>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"nx\">type</span> <span class=\"nx\">Sizes</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">medium</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">Sizes</span><span class=\"p\">):</span> <span class=\"nx\">number</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">20</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">size</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">medium</span><span class=\"dl\">\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">16</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"mi\">12</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n\n<span class=\"nx\">getPx</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">xlarge</span><span class=\"dl\">\"</span><span class=\"p\">)</span>\n<span class=\"c1\">// Argument of type '\"xlarge\"' is not assignable to parameter of type 'Sizes'</span>\n</code></pre></div>\n\n\n\n\n<hr>\n\n<h1>\n  <a name=\"pairing-with-recordltk-tgt\" href=\"#pairing-with-recordltk-tgt\" class=\"anchor\">\n  </a>\n  Pairing with Record&lt;K, T&gt;\n</h1>\n\n<p>Pairing string literal types with the <a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkt\">Record&lt;K, T&gt;</a> utility type is a slick pattern to use when you want to cleanup your code.</p>\n\n<p>Let's apply this pattern to <code>getPx</code>:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"nx\">type</span> <span class=\"nx\">Sizes</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">medium</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"kd\">const</span> <span class=\"nx\">sizes</span><span class=\"p\">:</span> <span class=\"nx\">Record</span><span class=\"o\">&lt;</span><span class=\"nx\">Sizes</span><span class=\"p\">,</span> <span class=\"nx\">number</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"na\">small</span><span class=\"p\">:</span> <span class=\"mi\">12</span><span class=\"p\">,</span>\n  <span class=\"na\">medium</span><span class=\"p\">:</span> <span class=\"mi\">16</span><span class=\"p\">,</span>\n  <span class=\"na\">large</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"p\">}</span>\n<span class=\"kd\">const</span> <span class=\"nx\">getPx</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">size</span><span class=\"p\">:</span> <span class=\"nx\">Sizes</span><span class=\"p\">):</span> <span class=\"nx\">number</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n <span class=\"k\">return</span> <span class=\"nx\">sizes</span><span class=\"p\">[</span><span class=\"nx\">size</span><span class=\"p\">]</span>\n<span class=\"p\">};</span>\n</code></pre></div>\n\n\n\n<p>That's a lot cleaner! Not only is it easier to add new sizes, but you'll also receive an error if you update <code>Sizes</code> without updating the <code>sizes</code> object.<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"c1\">// Add a new size without updating `sizes`</span>\n<span class=\"nx\">type</span> <span class=\"nx\">Sizes</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">small</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">medium</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">large</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">xlarge</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// Property 'xlarge' is missing in type '{ small: number; medium: number; large: number; }' but required in type 'Record&lt;Sizes, number&gt;'</span>\n</code></pre></div>\n\n\n\n\n<hr>\n\n<h1>\n  <a name=\"exhaustiveness-checking\" href=\"#exhaustiveness-checking\" class=\"anchor\">\n  </a>\n  Exhaustiveness checking\n</h1>\n\n<p>Another lesser known feature of string literal types is that you can benefit from what's known as <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#exhaustiveness-checking\">exhaustiveness type checking</a> when using switch statements. This means that TypeScript follows the flow of your code to determine if all cases are covered. If your code is too complex to work with the Record&lt;K, T&gt; pattern, then using exhaustiveness checking is a way to remove brittleness from your code.</p>\n\n<p>This can be demonstrated most easily by converting <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">this reducer</a> to TypeScript<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"nx\">type</span> <span class=\"nx\">ActionType</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">decrement</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">increment</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"nx\">type</span> <span class=\"nx\">Action</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">type</span><span class=\"p\">:</span> <span class=\"nx\">ActionType</span> <span class=\"p\">};</span>\n<span class=\"nx\">type</span> <span class=\"nx\">State</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">number</span> <span class=\"p\">};</span>\n<span class=\"kd\">const</span> <span class=\"nx\">initialState</span><span class=\"p\">:</span> <span class=\"nx\">State</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>\n\n<span class=\"kd\">function</span> <span class=\"nx\">reducer</span><span class=\"p\">(</span><span class=\"nx\">state</span><span class=\"p\">:</span> <span class=\"nx\">State</span><span class=\"p\">,</span> <span class=\"nx\">action</span><span class=\"p\">:</span> <span class=\"nx\">Action</span><span class=\"p\">):</span> <span class=\"nx\">State</span>  <span class=\"p\">{</span>\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"nx\">action</span><span class=\"p\">.</span><span class=\"nx\">type</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">increment</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n    <span class=\"k\">case</span> <span class=\"dl\">\"</span><span class=\"s2\">decrement</span><span class=\"dl\">\"</span><span class=\"p\">:</span>\n      <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"na\">count</span><span class=\"p\">:</span> <span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">count</span> <span class=\"o\">-</span> <span class=\"mi\">1</span> <span class=\"p\">};</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n\n\n\n<p>The key part of making this work is to remove the <code>default</code> case from the switch statement. By removing the <code>default</code> case, you'll run into a compile error when updating <code>ActionType</code> without updating the switch statement to handle the new case:<br>\n</p>\n\n<div class=\"highlight\"><pre class=\"highlight typescript\"><code><span class=\"c1\">// Add \"reset\" to `ActionType'</span>\n<span class=\"nx\">type</span> <span class=\"nx\">ActionType</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">decrement</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">increment</span><span class=\"dl\">\"</span> <span class=\"o\">|</span> <span class=\"dl\">\"</span><span class=\"s2\">reset</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"c1\">// Function lacks ending return statement and return type does not include 'undefined'</span>\n</code></pre></div>\n\n\n\n\n<hr>\n\n<h1>\n  <a name=\"conclusion\" href=\"#conclusion\" class=\"anchor\">\n  </a>\n  Conclusion\n</h1>\n\n<p>String literal types solve a handful of problems that help developers write clean, maintainable, and scalable code.</p>\n\n","canonical_url":"https://dev.to/dnnyjns/into-to-string-literal-types-13o2","edited_at":"2020-05-16T19:33:02Z","title":"Intro to string literal types"}},"pageContext":{"slug":"into-to-string-literal-types-13o2"}}}